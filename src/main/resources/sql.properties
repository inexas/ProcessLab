GetTable=SELECT * FROM INFORMATION_SCHEMA.SYSTEM_TABLES WHERE TABLE_NAME='{TableName}'
InstallStore=\
	CREATE TABLE Sequence(key VARCHAR PRIMARY KEY,nextId INT NOT NULL);\
	INSERT INTO Sequence(key,nextId)VALUES('EntityType',1);\
	\
	CREATE TABLE EntityType(\
		Id				VARCHAR,\
		NextId			INT NOT NULL,\
		Relational		CHAR(1) NOT NULL,\
		Markup			VARCHAR NOT NULL,\
		CONSTRAINT 		Pk_EntityType PRIMARY KEY(id));\
	\
	CREATE TABLE TupleTableName(\
		Name			VARCHAR,\
		Owner			VARCHAR NOT NULL,\
		Path			VARCHAR NOT NULL,\
		CONSTRAINT 		Pk_TupleTableName PRIMARY KEY(Name));\

uninstall=\
	DROP TABLE TupleTableName\
	DROP TABLE EntityType\
	DROP TABLE Sequence\


EntityTypeInsert=\
	INSERT INTO EntityType(Id,NextId,Relational,Markup)\
	VALUES('{Id}',1,'R','{Markup}')
EntityTypeDelete=\
	DELETE FROM EntityType WHERE Id='{Id}'
TupleTableNameInsert=\
	INSERT INTO TupleTableName(Name,Owner,Path)\
	VALUES('{Name}','{Owner}','{Path}')
TupleTableNameRead=\
	SELECT Name FROM TupleTableName WHERE Owner='{Owner}'
TupleTableNameDelete=\
	DELETE FROM TupleTableName WHERE Owner='{Owner}'
EnityDropTable=\
	DROP TABLE {TableName}

########################
# Database class (SEQUENCE table)
# The sequence table provides primary key IDs for other tables
# as its difficult to use the database itself as all the DBMSs 
# all provide different mechanisms
sequenceCreateSequence=INSERT INTO sequence(Key,NextId)VALUES('{Key}',1)
SequenceSelect=SELECT NextId FROM Sequence WHERE key='{Key}'
SequenceUpdate=UPDATE Sequence SET NextId={NextId} WHERE key='{Key}'

entityTypeReadAll=SELECT e.*,t.key,t.tableName FROM entityType e INNER JOIN tupleType t ON e.id=t.id
entityTypeReadFromKey=SELECT e.*,t.key,t.tableName FROM entityType e INNER JOIN tupleType t ON e.id=t.id WHERE t.key={Key}
entityTypeGetForHostId=\
	SELECT t.*\
	FROM entityType e INNER JOIN tupleType t ON e.id=t.id \
	WHERE e.hostId={HostId}

entityGetNextId=SELECT nextId FROM entityType WHERE id={Id}
entitySetNextId=UPDATE entityType SET nextId={NextId} WHERE id={Id}

tupleSetTableName=UPDATE tupleType SET tableName={TableName} WHERE id={Id}
TupleGetMatchingNames=SELECT TableName FROM TupleType WHERE TableName LIKE '{TableNameStem}%'
tupleInsert=\
	INSERT INTO {TableName}(rsvd_id{NonRootFieldNames}{Names})\
	VALUES({Id}{NonRootFields}{Values})
tupleUpdate=UPDATE {TableName} SET {NameValueList} WHERE rsvd_id={Id}
tupleDelete=DELETE FROM {TableName} WHERE rsvd_id={Id}
tupleDeleteList=DELETE FROM {TableName} WHERE rsvd_id IN({TupleIdList})

KtcvTypeInsert=\
	INSERT INTO KtcvType(Id,TupleId,Ordinal,Type,Value,Cardinality)\
	VALUES({Id},{TupleId},{Ordinal},{Type},{Value},{Cardinality})
ktcvTypeDelete=DELETE FROM ktcvType WHERE id IN({KtcvIdList})

constraintInsert=INSERT INTO constraint(ktcvId,name,value)VALUES({KtcvId},{Name},{Value})
constraintDelete=DELETE FROM constraint WHERE ktcvId IN({KtcvIdList})

# The following list will not be used as column names
ReservedNames=\
	BOOLEAN,DATE,DOUBLE,FLOAT,INT,INTEGER,LONG,SHORT,STRING,\
	SEQUENCE,ENTITTYPE,TUPLETYPE,KTCVTYPE,CONSTRAINT,PRIMARY,\
	RSVD_ID,RSVD_PID,RSVD_ORD,\
	processDefinition,activityDefinition,\
	participant,person,agent,role
maximumNameLength=15

pdInsert=\
	INSERT INTO processDefinition(id,version,key,initiatorRoleId)\
	VALUES({Id},{Version},{Key},{InitiatorRoleId})
pdReadById=SELECT * FROM processDefinition WHERE id={Id}
pdGetLatestVersion=SELECT MAX(version) AS maxVersion FROM processDefinition WHERE key={Key}
pdGetByKeyVersion=SELECT * FROM processDefinition WHERE key={Key} AND version={Version}

processInsert=\
	INSERT INTO process(id,pdId,parentId,name,initiatorId,startDatetime,dueDatetime)\
	VALUES({Id},{PdId},{ParentId},{Name},{InitiatorId},{StartDatetime},{DueDatetime})
processRead=SELECT * FROM process WHERE id={Id}
processUpdate=UPDATE process SET endDatetime={EndDatetime} WHERE id={Id}

adInsert=\
	INSERT INTO activityDefinition(id,key,pdId,scopeId,isStarter,dependee)\
	VALUES({Id},{Key},{PdId},{ScopeId},{IsStarter},{Dependee})
adReadById=SELECT * FROM activityDefinition WHERE id={Id}
adReadForProcessId=SELECT * FROM activityDefinition WHERE pdId={ProcessId}
adActionMappingFromInsert=\
	INSERT INTO actionMappingFrom(id,adId,action,target,isDefault)\
	VALUES({Id},{AdId},{Action},{Target},{IsDefault})
adActionMappingToInsert=\
	INSERT INTO actionMappingTo(amfId,action,target)\
	VALUES({AmfId},{Action},{Target})
adActionMappingsReadByAdId=\
	SELECT f.*,t.action AS toAction,t.target AS toTarget \
	FROM actionMappingFrom f LEFT JOIN actionMappingTo t ON f.id=t.amfId \
	WHERE f.adId={AdId}

activityInsert=\
	INSERT INTO activity(id,key,processId,definitionId,scopeId,performerId,preActivityId,reqActivityId,aState,dState,startDatetime)\
	VALUES({Id},{Key},{ProcessId},{DefinitionId},{ScopeId},{PerformerId},{PreActivityId},{ReqActivityId},{AState},{DState},{StartDatetime})
activityRead=\
	SELECT a.*,s.* \
	FROM activity a LEFT JOIN assignment s ON a.id=s.activityId \
	WHERE a.id={Id}
activityDelete=DELETE FROM activity WHERE id={Id}
activityCountActive=SELECT COUNT(*) FROM activity WHERE endDatetime=NULL AND processId={ProcessId}
activityUpdate=\
	UPDATE activity SET performerId={PerformerId},preActivityId={PredecessorId},reqActivityId={RequesterId},aState={AState},dState={DState},endDatetime={EndDatetime} \
	WHERE id={Id}

actionRecordInsert=\
	INSERT INTO actionRecord(processId,activityId,userId,name,performDatetime)\
	VALUES({ProcessId},{ActivityId},{UserId},{Name},{performDatetime})
actionRecordReadAllForPid=SELECT * FROM actionRecord WHERE processId={ProcessId}

assignmentInsert=\
	INSERT INTO assignment(activityId,duty,assigneeId,isPrimary)\
	VALUES({ActivityId},{Duty},{AssigneeId},{IsPrimary})
assignmentsReadForUser=SELECT * FROM assignment WHERE assigneeId IN ({IdList})
assignmentsDelete=DELETE FROM assignment WHERE activityId={ActivityId}

participantInsert=INSERT INTO participant(id,key,type)VALUES({Id},{Key},{Type})
participantReadById=SELECT * FROM participant WHERE id={Id}
participantReadByKey=SELECT * FROM participant WHERE key={Key}

agentInsert=INSERT INTO agent(id,password)VALUES({Id},{Password})
agentRead=SELECT * FROM agent WHERE id={Id}

roleInsert=INSERT INTO role(id,key,pdId,cardinality)VALUES({Id},{Key},{PdId},{Cardinality})
roleReadById=\
	SELECT r.*,p.key,m.id AS memberId,m.key AS memberKey \
	FROM role r JOIN participant p ON r.id=p.id \
	LEFT JOIN roleParticipant rp ON r.id=rp.roleId \
	LEFT JOIN participant m ON rp.participantId=m.id \
	WHERE id={Id}
dynamicRoleInsert=INSERT INTO role(id,key,pdId,extent,cardinality)VALUES({Id},{Key},{PdId},{Extent},'0..*')
roleReadForPdId=\
	SELECT r.*,p.key,m.id AS memberId,m.key AS memberKey \
	FROM role r JOIN participant p ON r.id=p.id \
	LEFT JOIN roleParticipant rp ON r.id=rp.roleId \
	LEFT JOIN participant m ON rp.participantId=m.id \
	WHERE pdId={ProcessId}
roleAddMember=INSERT INTO roleParticipant(roleId,participantId)VALUES({RoleId},{ParticipantId})
roleGetForUserID=\
	SELECT r.id AS id \
	FROM role r JOIN roleParticipant rp ON r.id=rp.roleId \
	WHERE rp.participantId={UserId}

installTestData=\
	UPDATE sequence SET nextId=1000 WHERE key='Participant'\
	INSERT INTO participant(id,key,type)VALUES(100,'Ant','A');\
	INSERT INTO agent(id,key,password)VALUES(100,'Ant','Password');\
	INSERT INTO roleParticipant(roleId,participantId)VALUES(1,100);\
	INSERT INTO participant(id,key,type)VALUES(101,'Bee','A');\
	INSERT INTO agent(id,key,password)VALUES(101,'Bee','Password');\
	INSERT INTO roleParticipant(roleId,participantId)VALUES(1,101);\
	INSERT INTO participant(id,key,type)VALUES(102,'Cat','A');\
	INSERT INTO agent(id,key,password)VALUES(102,'Cat','Password');\
	INSERT INTO roleParticipant(roleId,participantId)VALUES(1,102);\
	INSERT INTO participant(id,key,type)VALUES(200,'Anyone','D');\
	INSERT INTO role(id,key,pdId,extent,cardinality)VALUES(200,'Anyone',NULL,'SELECT id FROM person','0..*');\

######################################
